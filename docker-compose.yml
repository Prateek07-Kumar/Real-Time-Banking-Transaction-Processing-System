# docker-compose.yml
version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: transaction_db
    environment:
      POSTGRES_DB: transaction_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mechanism-x:
    build: .
    container_name: mechanism_x
    command: python -c "from mechanism_x import MechanismX; MechanismX().run()"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./credentials.json:/app/credentials.json
      - ./token.json:/app/token.json
    restart: unless-stopped

  mechanism-y:
    build: .
    container_name: mechanism_y
    command: python -c "from mechanism_y import MechanismY; MechanismY().run()"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    restart: unless-stopped
    deploy:
      replicas: 2

volumes:
  postgres_data:


# .dockerignore
__pycache__
*.pyc
*.pyo
*.pyd
.Python
*.so
*.egg
*.egg-info
dist
build
.git
.gitignore
.env
token.json
*.log
.DS_Store